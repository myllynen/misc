# Usage:
# 1) Copy the accompanying ansible.cfg as ~/.ansible.cfg
# 2) Install Ansible
# 3) Adjust and run the playbook
# 4) Set password for the new user and reboot
---
- name: Initialize RHEL 9
  hosts: all
  become: true
  gather_facts: true
  vars:
    console_keymap: fi
    console_font: eurlatgr
    langpacks: ['en', 'fi']
    system_locale: en_US.UTF-8
    system_timezone: Europe/Helsinki
    root_shell: /bin/zsh
    create_user: false
    user_uid: 1000
    user_name: mm
    user_group: users
    user_shell: /bin/zsh
    workstation: false
    enable_sshd: true
    disable_network_services: true
    use_epel: false
  tasks:
    - name: Check target basics
      raw: rpm -q python3 python3-dnf python3-libselinux
      check_mode: false
      register: basics
      failed_when: false
      changed_when: false

    - name: Prepare target basics
      raw: dnf -y install python3 python3-dnf python3-libselinux
      changed_when: true
      when: basics.rc != 0

    - name: Create target remote_tmp
      file: path={{ ansible_facts.env.HOME }}/.ansible/tmp mode=0700 state=directory

    - name: Detect boot parameters
      command: grep -q TIMEOUT=5 /etc/default/grub
      check_mode: false
      register: adjust_boot_parameters
      failed_when: false
      changed_when: false

    - name: Install grubby
      dnf: name=grubby state=present
      when: adjust_boot_parameters.rc == 0

    - name: Adjust boot timeout
      replace: dest=/etc/default/grub regexp='^GRUB_TIMEOUT=.*' replace='GRUB_TIMEOUT=1'
      when: adjust_boot_parameters.rc == 0

    - name: Adjust boot parameters
      command: grubby --remove-args="rhgb" --args="quiet systemd.show_status=yes" --update-kernel=ALL
      changed_when: true
      when: adjust_boot_parameters.rc == 0

    - name: Detect rescue images
      find: paths=/boot,/boot/loader/entries patterns='*rescue*'
      register: rescue_images

    - name: Remove rescue images
      file: path="{{ item }}" state=absent
      loop: "{{ rescue_images.files | map(attribute='path') | list }}"

    - name: Update GRUB configuration
      command: grub2-mkconfig -o /boot/grub2/grub.cfg
      changed_when: true
      when: adjust_boot_parameters.rc == 0

    - name: Detect LUKS configuration
      command: grep -q mapper/luks /etc/fstab
      check_mode: false
      register: luks_in_use
      failed_when: false
      changed_when: false

    - name: Configure console
      copy:
        content: |
          KEYMAP="{{ console_keymap }}"
          FONT="{{ console_font }}"
        dest: /etc/vconsole.conf
        mode: '0644'

    - name: Configure locale
      copy:
        content: |
          LANG="{{ system_locale }}"
        dest: /etc/locale.conf
        mode: '0644'

    - name: Set timezone
      community.general.timezone: name="{{ system_timezone }}"

    - name: Check EPEL repository
      # noqa: command-instead-of-module
      command: rpm -q epel-release-{{ ansible_facts.distribution_major_version }}
      register: epel_enabled
      failed_when: false
      changed_when: false
      when: use_epel | bool

    - name: Enable EPEL repository
      dnf:
        name:
          - https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_facts.distribution_major_version }}.noarch.rpm
        disable_gpg_check: true
        state: present
      when: use_epel | bool and epel_enabled.rc != 0

    - name: Check RPM Fusion repository
      # noqa: command-instead-of-module
      command: >
        rpm -q rpmfusion-free-release-{{ ansible_facts.distribution_major_version }} rpmfusion-nonfree-release-{{ ansible_facts.distribution_major_version }}
      register: fusion_enabled
      failed_when: false
      changed_when: false
      when: use_epel | bool and workstation | bool

    - name: Enable RPM Fusion repository
      dnf:
        name:
          - https://download1.rpmfusion.org/free/el/rpmfusion-free-release-{{ ansible_facts.distribution_major_version }}.noarch.rpm
          - https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-{{ ansible_facts.distribution_major_version }}.noarch.rpm
        disable_gpg_check: true
        state: present
      when: use_epel | bool and workstation | bool and fusion_enabled.rc != 0

    - name: Remove unneeded firmware packages
      dnf:
        name:
          - 'at*firmware*'
          - 'i*firmware*'
          - 'lib*firmware*'
          - 'z*firmware'
        autoremove: true
        cacheonly: true
        state: absent
      when: ansible_facts.virtualization_role == "guest"

    - name: Remove unhelpful packages on VM
      dnf:
        name:
          - akmods
          - 'dmraid*'
          - 'libvirt*'
          - 'pcsc*'
          - thermald
        autoremove: true
        cacheonly: true
        state: absent
      when: ansible_facts.virtualization_role == "guest"

    - name: Remove unneeded packages on Hyper-V
      dnf:
        name:
          - open-vm-tools
          - qemu-guest-agent
          - spice-vdagent
          - virtualbox-guest-additions
        autoremove: true
        cacheonly: true
        state: absent
      when: ansible_facts.virtualization_type == "VirtualPC"

    - name: Remove unneeded packages on KVM
      dnf:
        name:
          - 'hyperv*'
          - open-vm-tools
          - virtualbox-guest-additions
        autoremove: true
        cacheonly: true
        state: absent
      when: ansible_facts.virtualization_type == "kvm"

    - name: Remove unneeded packages on VirtualBox
      dnf:
        name:
          - 'hyperv*'
          - open-vm-tools
          - qemu-guest-agent
          - spice-vdagent
        autoremove: true
        cacheonly: true
        state: absent
      when: ansible_facts.virtualization_type == "virtualbox"

    - name: Remove unneeded packages on VMware
      dnf:
        name:
          - 'hyperv*'
          - qemu-guest-agent
          - spice-vdagent
          - virtualbox-guest-additions
        autoremove: true
        cacheonly: true
        state: absent
      when: ansible_facts.virtualization_type == "VMware"

    - name: Remove unneeded Plymouth packages
      dnf:
        name:
          - 'plymouth*'
        autoremove: true
        cacheonly: true
        state: absent
      when: not luks_in_use.rc == 0

    - name: Remove unhelpful packages
      dnf:
        name:
          - NetworkManager-adsl
          - NetworkManager-openconnect
          - NetworkManager-pptp
          - NetworkManager-team
          - NetworkManager-tui
          #- 'PackageKit*'
          - 'abrt*'
          - anaconda
          - 'b43*'
          - cifs-utils
          - cockpit
          - dracut-config-rescue
          - dracut-live
          - evolution
          - 'foomatic*'
          - gnome-tour
          - gnome-user-docs
          - 'gutenprint*'
          - '*hangul*'
          - 'hplip*'
          - 'java*'
          - kernel-modules-extra
          - '*kkc*'
          - '*libreoffice*'
          - nfs-utils
          - orca
          - pam_krb5
          - 'perl*'
          - '*pinyin*'
          - qgnomeplatform
          - 'qt*'
          - realmd
          - 'sane*'
          - teamd
          - trousers
          - '*zhuyin*'
        autoremove: true
        cacheonly: true
        state: absent

    - name: Install helpful packages (common)
      dnf:
        name:
          - bash-completion
          - bc
          - bind-utils
          #- cloud-init
          #- cloud-utils-growpart
          - ethtool
          - git-core
          - glibc-minimal-langpack
          #- gpm
          #- insights-client
          #- iotop
          - irqbalance
          #- ltrace
          - man-pages
          - mlocate
          - nano
          #- nmap-ncat
          #- numactl
          - openssh-clients
          #- pcp-doc
          #- pcp-system-tools
          #- perf
          - policycoreutils-python-utils
          - psmisc
          - setools-console
          - sos
          - strace
          - tar
          - tcpdump
          #- telnet
          - tmux
          - tuned
          - unzip
          - util-linux-user
          - yum-utils
          - zsh
          - zstd
        state: present

    - name: Install helpful packages (guest agent)
      vars:
        agent_packages:
          kvm: qemu-guest-agent
          VirtualPC: 'hyperv*'
          VMware: open-vm-tools
      dnf:
        name: "{{ agent_packages[ansible_facts.virtualization_type] }}"
        state: present
      when:
        - ansible_facts.virtualization_role == "guest"
        - ansible_facts.virtualization_type in agent_packages

    - name: Install helpful packages (langpacks)
      dnf: name="glibc-langpack-{{ langpacks | join(',glibc-langpack-') }}" state=present

    - name: Install helpful packages (common from EPEL)
      dnf:
        name:
          - epel-release
          - keychain
          - xclip
        state: present
      when: use_epel | bool

    - name: Install helpful packages (workstation)
      dnf:
        name:
          - dconf-editor
          - gnome-tweaks
          - gstreamer1-plugins-good-gtk
          - patch
          #- powertop
          - seahorse
          - totem
          - xauth
          - xorg-x11-fonts-misc
          - xorriso
        state: present
      when: workstation | bool

    - name: Install helpful packages (workstation langpacks)
      dnf: name="langpacks-core-{{ langpacks | join(',langpacks-') }}" state=present
      when: workstation | bool

    - name: Install helpful packages (workstation from EPEL)
      dnf:
        name:
          - GraphicsMagick
          - ffmpeg
          #- fuse-sshfs
          - gstreamer1-libav
          - libavc1394
          #- ntfsprogs
          #- vlc
          - youtube-dl
        state: present
      when: workstation | bool and use_epel | bool

    - name: Remove unhelpful packages ('all' langpacks)
      dnf:
        name:
          - gawk-all-langpacks
          - glibc-all-langpacks
        autoremove: true
        cacheonly: true
        state: absent

    - name: Update all packages
      # noqa: package-latest
      dnf: name='*' update_cache=true state=latest

    - name: Check current boot parameters
      shell: set -o pipefail ; cat /proc/cmdline | grep -q rhgb
      check_mode: false
      register: rhgb_used
      failed_when: false
      changed_when: false

    - name: Ensure correct boot parameters
      command: grubby --remove-args="rhgb" --args="quiet systemd.show_status=yes" --update-kernel=ALL
      changed_when: true
      when: rhgb_used.rc == 0

    - name: Disable unhelpful services
      service: name={{ item }} enabled=false
      loop:
        - cups.service
        - dmraid-activation.service
        - dnf-makecache.timer
        - lvm2-monitor.service
        - mcelog.service
        - mdmonitor.service
        - multipathd.service
        #- pmie.service
      failed_when: false

    - name: Disable unhelpful services on VMs
      service: name={{ item }} enabled=false
      loop:
        - raid-check.timer
        - switcheroo-control
        - upower.service
      failed_when: false
      when: ansible_facts.virtualization_role == "guest"

    - name: Disable unhelpful network services
      service: name={{ item }} enabled=false state=stopped
      loop:
        - bluetooth.service
        - iscsi.service
        - iscsid.socket
        - iscsiuio.socket
        - nfs-client.target
        - nfs-convert.service
        - remote-fs.target
      failed_when: false
      when: disable_network_services | bool

    - name: Enable helpful services
      service: name={{ item }} enabled=true state=started
      loop:
        #- gpm.service
        - irqbalance.service
        #- pmcd.service
        #- pmlogger.service
        - tuned.service

    - name: Install SSH daemon
      dnf: name=openssh-server state=present
      when: enable_sshd | bool

    - name: Enable SSH daemon
      service: name=sshd enabled=true state=started
      when: enable_sshd | bool

    - name: Change root shell
      user: name=root shell={{ root_shell }}

    - name: Disable pulseaudio for root, part I
      file:
        path: /root/.config/systemd/user
        state: directory
        mode: '0755'

    - name: Disable pulseaudio for root, part II
      file:
        dest: /root/.config/systemd/user/{{ item }}
        src: /dev/null
        state: link
      loop:
        - pulseaudio.service
        - pulseaudio.socket

    - name: Create user, part I
      user:
        name: "{{ user_name }}"
        shell: "{{ user_shell }}"
        group: "{{ user_group }}"
        uid: "{{ user_uid }}"
      when: create_user | bool

    - name: Create user, part II
      copy:
        dest: /var/lib/AccountsService/users/{{ user_name }}
        content: |
          [User]
          Language=
          XSession=
          Icon=/home/{{ user_name }}/.face
          SystemAccount=false
        owner: root
        group: root
        mode: '0600'
      when: create_user | bool and workstation | bool

    - name: Disable tracker for the user, part I
      file:
        path: "/home/{{ user_name }}/.config/systemd/user"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_group }}"
        mode: '0755'
      when: false and create_user | bool

    - name: Disable tracker for the user, part II
      file:
        dest: "/home/{{ user_name }}/.config/systemd/user/{{ item }}"
        src: /dev/null
        state: link
        owner: "{{ user_name }}"
        group: "{{ user_group }}"
      loop:
        - tracker-extract.service
        - tracker-miner-apps.service
        - tracker-miner-fs.service
        - tracker-miner-rss.service
        - tracker-store.service
        - tracker-writeback.service
      when: false and create_user | bool

    - name: Disable tracker for the user, part III
      command: restorecon -Rv "/home/{{ user_name }}/.config/systemd"
      register: restorecon
      changed_when: "'Relabeled' in restorecon.stdout"
      when: false and create_user | bool

    - name: Configure sudoers
      lineinfile:
        path: /etc/sudoers.d/{{ user_name }}
        line: '{{ user_name }} ALL=(ALL) NOPASSWD: ALL'
        create: true
        mode: '0440'
        validate: /usr/sbin/visudo -csf %s
      when: create_user | bool

    - name: Block unwanted user monitoring
      lineinfile:
        path: /etc/hosts
        line: 127.0.0.2 musicbrainz.org
      when: workstation | bool

    - name: Cleaning up, part I
      file: path={{ item }} state=absent
      loop:
        - /1
        - /etc/rc.d/init.d/livesys
        - /root/.config/pulse
        - /root/.esd_auth
        - /root/.lesshst
        - /root/.local/share/ibus-typing-booster
        - /root/.rnd
        - /root/.wget-hsts
        - /root/anaconda-ks.cfg
        - /root/original-ks.cfg
        - /var/lib/abrt
        - /var/spool/abrt
        - /var/tmp/abrt

    - name: Cleaning up, part II
      find:
        paths: /tmp
        patterns: 'ks-script*'
      register: tmp_files

    - name: Cleaning up, part III
      file:
        path: "{{ item }}"
        state: absent
      loop: "{{ tmp_files.files | map(attribute='path') | list }}"
