# Use -e keys=unique to create unique keys for each host
---
- name: Generate user SSH keys
  hosts: "{{ 'all' if keys | default(false) == 'unique' else 'all[0]' }}"
  gather_facts: false
  vars:
    ssh_key_type: ed25519
  tasks:
    - name: Gather needed facts
      setup:
        gather_subset:
          - '!all'
          - '!min'
          - user
      when: ansible_facts.user_dir is not defined or
            ansible_facts.user_id is not defined

    - name: Generate user public/private SSH key pair
      user:
        name: "{{ ansible_facts.user_id }}"
        state: present
        generate_ssh_key: true
        ssh_key_type: "{{ ssh_key_type }}"

    - name: Read user public SSH key
      slurp:
        src: "{{ ansible_facts.user_dir }}/.ssh/id_{{ ssh_key_type }}.pub"
      register: public_key

    - name: Read user private SSH key
      slurp:
        src: "{{ ansible_facts.user_dir }}/.ssh/id_{{ ssh_key_type }}"
      register: private_key

    - name: Set public SSH key
      set_fact:
        public_ssh_key: "{{ public_key.content | b64decode }}"

    - name: Set private SSH key
      set_fact:
        private_ssh_key: "{{ private_key.content | b64decode }}"

- name: Set shared SSH keys
  hosts: "{{ 'all:!all[0]' if keys | default(false) != 'unique' else 'all[0]' }}"
  gather_facts: false
  tasks:
    - name: Set shared public SSH key
      set_fact:
        public_ssh_key: "{{ hostvars[groups.all[0]].public_ssh_key }}"
      when: keys | default(false) != 'unique'

    - name: Set shared private SSH key
      set_fact:
        private_ssh_key: "{{ hostvars[groups.all[0]].private_ssh_key }}"
      when: keys | default(false) != 'unique'

- name: Distribute shared SSH key
  hosts: "{{ 'all:!all[0]' if keys | default(false) != 'unique' else 'all[0]' }}"
  gather_facts: false
  tasks:
    - name: Gather needed facts
      setup:
        gather_subset:
          - '!all'
          - '!min'
          - user
      when: ansible_facts.user_dir is not defined

    - name: Create user SSH directory
      file:
        path: "{{ ansible_facts.user_dir }}/.ssh"
        state: directory
        mode: '0700'
      when: keys | default(false) != 'unique'

    - name: Create public SSH key
      copy:
        content: "{{ hostvars[groups.all[0]].public_ssh_key }}"
        dest: "{{ ansible_facts.user_dir }}/.ssh/id_{{ ssh_key_type }}.pub"
        mode: '0644'
      when: keys | default(false) != 'unique'

    - name: Create private SSH key
      copy:
        content: "{{ hostvars[groups.all[0]].private_ssh_key }}"
        dest: "{{ ansible_facts.user_dir }}/.ssh/id_{{ ssh_key_type }}"
        mode: '0600'
      when: keys | default(false) != 'unique'

- name: Enable cross-node SSH access
  hosts: all
  gather_facts: false
  tasks:
    - name: Gather needed facts
      setup:
        gather_subset:
          - '!all'
          - '!min'
          - network
          - ssh_host_key_ed25519_public
          - user
      when: ansible_facts.user_dir is not defined or
            ansible_facts.user_id is not defined or
            ansible_facts.fqdn is not defined or
            ansible_facts.hostname is not defined or
            ansible_facts.default_ipv4 is not defined or
            ansible_facts.ssh_host_key_ed25519_public is not defined

    - name: Update authorized keys
      ansible.posix.authorized_key:
        user: "{{ ansible_facts.user_id }}"
        key: "{{ hostvars[item].public_ssh_key }}"
      loop: "{{ ansible_play_batch }}"

    - name: Update known_hosts localhost entry
      lineinfile:
        path: "{{ ansible_facts.user_dir }}/.ssh/known_hosts"
        line: "{{ 'localhost' + ',' +
                  '127.0.0.1' + ' ' +
                  'ssh-ed25519' + ' ' +
                  hostvars[inventory_hostname].ansible_facts.ssh_host_key_ed25519_public }}"
        create: true
        mode: '0600'
      loop:
        - localhost

    - name: Update known_hosts FQDN entry
      lineinfile:
        path: "{{ ansible_facts.user_dir }}/.ssh/known_hosts"
        line: "{{ hostvars[item].ansible_facts.fqdn + ',' +
                  hostvars[item].ansible_facts.default_ipv4.address + ' ' +
                  'ssh-ed25519' + ' ' +
                  hostvars[item].ansible_facts.ssh_host_key_ed25519_public }}"
        create: true
        mode: '0600'
      loop: "{{ ansible_play_batch }}"

    - name: Update known_hosts short entry
      lineinfile:
        path: "{{ ansible_facts.user_dir }}/.ssh/known_hosts"
        line: "{{ hostvars[item].ansible_facts.hostname + ',' +
                  hostvars[item].ansible_facts.default_ipv4.address + ' ' +
                  'ssh-ed25519' + ' ' +
                  hostvars[item].ansible_facts.ssh_host_key_ed25519_public }}"
        create: true
        mode: '0600'
      loop: "{{ ansible_play_batch }}"
